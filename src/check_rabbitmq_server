#!/usr/bin/env perl

###  check_rabbitmq_aliveness.pl

# Use the management overview to check server statistics

##############################################################################
# prologue
use strict;
use warnings;

use Nagios::Plugin qw(%STATUS_TEXT OK CRITICAL WARNING UNKNOWN);
use LWP::UserAgent;
use URI::Escape;
use JSON;

use Data::Dumper;

use vars qw($VERSION $PROGNAME  $verbose $timeout $code $message);
$VERSION = '1.0';

# get the base name of this script for use in the examples
use File::Basename;
$PROGNAME = basename($0);


##############################################################################
# define and get the command line options.
#   see the command line option guidelines at
#   http://nagiosplug.sourceforge.net/developer-guidelines.html#PLUGOPTIONS


# Instantiate Nagios::Plugin object (the 'usage' parameter is mandatory)
my $p = Nagios::Plugin->new(
    usage => "Usage: %s OPTIONS",
    license => "",
    version => $VERSION,
    blurb => 'This plugin uses the RabbitMQ management node API to check server process parameters.',
);

$p->add_arg(spec => 'host|H=s',
    help => "Specify the host to connect to",
    required => 1
);
$p->add_arg(spec => 'port|p=i',
    help => "Specify the port to connect to (default: %s)",
    default => 55672
);

$p->add_arg(
    spec => 'warning|w=s',

    help =>
qq{-w, --warning=INTEGER,INTEGER,INTEGER
   Warning thresholds specified in order that the metrics are returned.
   (Default : %s)},
#   required => 1,
   default => "80,80,80",
);

$p->add_arg(
    spec => 'critical|c=s',
    help =>
qq{-c, --critical=INTEGER,INTEGER,INTEGER
   Warning thresholds specified in order that the metrics are returned.
   (Default: %s) },
   default => "90,90,90",
);

$p->add_arg(spec => 'user|u=s',
    help => "Username (default: %s)",
    default => "guest",
);
$p->add_arg(spec => 'password|p=s',
    help => "Password (default: %s)",
    default => "guest"
);

# Parse arguments and process standard ones (e.g. usage, help, version)
$p->getopts;


# Check we have three values for warning and critical thresholds
my @warning = split(',', $p->opts->warning);
$p->nagios_die("You should specify three ranges for --warning argument") unless $#warning == 2;

my @critical = split(',', $p->opts->critical);
$p->nagios_die("You should specify three ranges for --critical argument") unless $#critical == 2;

##############################################################################
# check stuff.

my $hostname = $p->opts->host;
$hostname =~ /^([a-zA-Z0-9-]*)/;
my $shortname=$1;
my $port = $p->opts->port;

my $path = "nodes/rabbit\@$shortname";
my $url = "http://$hostname:$port/api/$path";

my $ua = LWP::UserAgent->new(env_proxy=>1);
$ua->agent($PROGNAME.' ');
$ua->timeout($p->opts->timeout);
$ua->credentials("$hostname:$port",
    "Management: Web UI", $p->opts->user, $p->opts->password);
my $req = HTTP::Request->new(GET => $url);
my $res = $ua->request($req);

if (!$res->is_success) {
    # Deal with standard error conditions - make the messages more sensible
    if ($res->code == 400) {
        my $bodyref = decode_json $res->content;
        $p->nagios_exit(CRITICAL, $bodyref->{'reason'});
    }
    $res->code == 404 and $p->nagios_die("Not found: ".$path);
    $res->code == 401 and $p->nagios_die("Access refused: ".$path);
    if ($res->code < 200 or $res->code > 400 ) {
        $p->nagios_exit(CRITICAL, "Received ".$res->status_line." for path: ".$path);
    }
}

my $bodyref = decode_json $res->content;
check($p, "Memory", $bodyref->{'mem_used'}, $bodyref->{'mem_limit'}, $warning[0], $critical[0]);
check($p, "Process", $bodyref->{'proc_used'}, $bodyref->{'proc_total'}, $warning[1], $critical[1]);
check($p, "FD", $bodyref->{'fd_used'}, $bodyref->{'fd_total'}, $warning[2], $critical[2]);

($code, $message) = $p->check_messages(join_all=>', ');
$p->nagios_exit( return_code=>$code, message=>$message);


sub check {
    my $p = shift;
    my $label = shift;
    my $used = shift;
    my $limit = shift;
    my $warning = shift;
    my $critical = shift;

    my $value = percent($used, $limit);
    my $code = $p->check_threshold(check => $value, warning => $warning, critical => $critical);
    $p->add_message($code, sprintf("$label ".$STATUS_TEXT{$code}." (%.2f%%)", $value)) ;
    $p->add_perfdata(label=>$label, value => $value, uom=>"%", warning=>$warning, critical=>$critical);
}

sub percent {
    my $num = shift;
    my $denom = shift;
    return (10000 * $num/ $denom)%1000/100;
}

sub structured {
    my $content = shift;
    $Data::Dumper::Terse = 1;          # don't output names where feasible
    $Data::Dumper::Indent = 2;

    return Dumper($content);

}