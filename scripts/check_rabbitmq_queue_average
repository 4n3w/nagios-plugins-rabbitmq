#!/usr/bin/env perl
#
# check_rabbitmq_queue_average
#
# Use the management APIs to check a queue
#
use strict;
use warnings;

use Nagios::Plugin qw(OK CRITICAL WARNING UNKNOWN);
use Nagios::Plugin::Functions qw(%STATUS_TEXT);
use LWP::UserAgent;
use URI::Escape;
use JSON;

use vars qw($VERSION $PROGNAME  $verbose $timeout);
$VERSION = '1.0';

use File::Basename;
$PROGNAME = basename($0);

my $p = Nagios::Plugin->new(
    usage => "Usage: %s [options] -H hostname",
    license => "",
    version => $VERSION,
    blurb => 'This plugin uses the RabbitMQ management API to check a
specific queue.',
);

$p->add_arg(spec => 'hostname|host|H=s',
    help => "Host where RabbitMQ is running",
    required => 1
);
$p->add_arg(spec => 'port=i',
    help => "RabbitMQ Port (default: %s)",
    default => 55672
);

$p->add_arg(spec => 'username|user|u=s',
    help => "Username (default: %s)",
    default => "guest",
);
$p->add_arg(spec => 'password|p=s',
    help => "Password (default: %s)",
    default => "guest"
);

$p->add_arg(spec => 'vhost=s',
    help => "The RabbitMQ virtual host where the queue resides (default: %s)",
    default => "/"
);

$p->add_arg(spec => 'queue=s',
    help => "The queue to check",
    required => 1
);

$p->add_arg(spec => 'warning=s',
    help => "Warning threshold for messages.",
    required => 1
);

$p->add_arg(spec => 'critical=s',
    help => "Critical threshold for messages.",
    required => 1
);

$p->add_arg(spec => 'samples=s',
    help => "Number of Samples to collect before calculating the average. ",
    required => 1
);

$p->add_arg(spec => 'ssl|ssl!',
    help => "Use SSL (default: false)",
    default => 0
);

$p->add_arg(spec => 'tmpdir=s',
    help => "Absolute path to tmp dir to store prior sample counts in. " .
    " Default: (%s)",
    default => "/tmp"
);

# Parse arguments and process standard ones (e.g. usage, help, version)
$p->getopts;

my $warning = $p->opts->warning;
my $critical = $p->opts->critical;
my $sample_limit = $p->opts->samples;
my $temp_path = $p->opts->tmpdir;

##############################################################################
# check stuff.

my $hostname=$p->opts->hostname;
my $port=$p->opts->port;
my $vhost=uri_escape($p->opts->vhost);
my $queue=$p->opts->queue;

my $ua = LWP::UserAgent->new(env_proxy=>1);
$ua->agent($PROGNAME.' ');
$ua->timeout($p->opts->timeout);
# Different security domains in 2.5 and 2.6
$ua->credentials("$hostname:$port",
    "Management: Web UI", $p->opts->username, $p->opts->password);
$ua->credentials("$hostname:$port",
    "RabbitMQ Management", $p->opts->username, $p->opts->password);

my $url = sprintf("http%s://%s:%d/api/queues/%s/%s", ($p->opts->ssl ?
"s" : ""), $hostname, $port, $vhost, $queue);

# Checks RabbitMQ, errors out if queue can't be found etc
my ($retcode, $result) = request($url);
if ($retcode != 200) {
    $p->nagios_exit(CRITICAL, "$result : $url");
}

my $metric = "messages";
my ($code, $message, $samples, $value) = undef;

($retcode, $value, $samples) =
    get_average(sprintf("$temp_path/nagios-check.%s:%d-%s-%s.txt", $hostname,
                        $port,
                        $vhost,
                        $queue),
                $sample_limit,
                $result->{$metric}
               );

if ($retcode != 200) {
    $p->nagios_exit(CRITICAL, "$value : $url");
}

if($samples < $sample_limit){ #if we don't have enough samples
    $code = 0;
} else {
    $code = $p->check_threshold(check => $value, warning => $warning,
critical => $critical);
}

$p->add_message($code, sprintf("%s: Avg. Msgs: %d", $queue, $value));
($code, $message) = $p->check_messages(join_all => ', ');
$p->nagios_exit(return_code => $code, message => $message);

sub request {
    my ($url) = @_;
    my $req = HTTP::Request->new(GET => $url);
    my $res = $ua->request($req);

    if (!$res->is_success) {
        # Deal with standard error conditions - make the messages more sensible
        if ($res->code == 400) {
            my $bodyref = decode_json $res->content;
            return (400, $bodyref->{'reason'});

        }
        $res->code == 404 and return (404, "Not Found");
        $res->code == 401 and return (401, "Access Refused");
        $res->status_line =~ /Can\'t connect/ and return (500,
"Connection Refused : $url");
        if ($res->code < 200 or $res->code > 400 ) {
            return ($res->code, "Received ".$res->status_line);
        }
    }
    my $bodyref = decode_json $res->content;
    return($res->code, $bodyref);
}

sub get_average {
    my ($tmpfile, $limit, $count) = @_;
    my $total = 0;
    my ($div, @lines, $size) = undef;

    if (!($count =~ /^?\d$/) ) {
        return( 417, "Bad value returned from rabbit: $count", 0)
    }
    if (-e $tmpfile) {
        open(FILE,$tmpfile) or return (403, "Can't $tmpfile for
reading: $!", 0);
        @lines = <FILE>;
        close(FILE);
        $size = @lines;
    } else {
        $size = 0;
    }
    open my $FH,'>',$tmpfile or return (403, "Can't open $tmpfile for
writing: $!", 0);
    unshift(@lines, "$count\n");
    while( $size-- > $limit-1 ){
       pop @lines;
    }
    $div = @lines;
    foreach( @lines ){
        $total += $_;
        print $FH $_;
    }
    close $FH;
    return (200, int($total / ($div)), $div);
}


=head1 NAME

check_rabbitmq_queue_average - Nagios plugin that uses RabbitMQ management API
 to count the messages pending on a given queue after a certain number of
sample attempts. It then calculates the average size of the set of checks and
returns OK, WARNING or CRITICAL based on the thresholds that are set.

=head1 SYNOPSIS

check_rabbitmq_queue_average [options] -H hostname

=head1 DESCRIPTION

Uses the management interface of RabbitMQ to count the number of messages on a
given queue. If the number of messages is beyond a given threshold, the
appropriate Nagios code is returned.

Critical and warning thresholds must be set.

Pending messages may be considered OK until enough samples have been collected
(in a simple text file) wherein the plugin would then consider that check to be
CRITICAL, WARNING or OK depending on the thresholds you set.

It uses Nagios::Plugin and accepts all standard Nagios options.

=head1 OPTIONS

=over

=item -h | --help

Display help text

=item -v | --verbose

Verbose output

=item -t | --timeout

Set a timeout for the check in seconds

=item -H | --hostname | --host

The host to connect to

=item --port

The port to connect to (default: 55672)

=item --ssl

Use SSL when connecting (default: false)

=item --username | --user

The user to connect as (default: guest)

=item --pass

The password for the user (default: guest)

=item -w | --warning

The warning level for the count of messages.

=item -c | --critical

The critical level for the count of messages.

=item --queue

The queue to check.

=item --vhost

The vhost to connect to. Default is "/"

=item --samples

The number of samples to collect before issuing a WARNING or CRITICAL.


=back

=head1 EXAMPLES

The following example:

    check_rabbitmq_queue_average -H rabbit.example.com
--queue=testing.nagios -u guest -p guest --warning=250 --critical=500
--samples=3

Returns a standard Nagios result:

    RABBITMQ_QUEUE OK - Queue: (testing.nagios) Messages: 0

Under different circumstances, you may want to do periodic checks (say
5 minutes):

(12:05): Sample A: 251 messages in queue yields:

    RABBITMQ_QUEUE OK - Queue: (testing.nagios) Messages: 251

(12:10): Sample B: 302 messages in queue yields:

    RABBITMQ_QUEUE OK - Queue: (testing.nagios) Messages: 302

(12:15): Sample C: 6,201,768 messages in queue yields:

    RABBITMQ_QUEUE CRITICAL - Queue: (testing.nagios) Messages: 6201768

Remember that the plugin will only issue WARNING or CRITICAL if the amount of
sampled checks is equal to or greater than the --samples option specified.

=head1 ERRORS

The check tries to provide useful error messages on the status line for
standard error conditions.

Otherwise it returns the HTTP Error message returned by the management
interface.

=head1 EXIT STATUS

Returns zero if check is OK otherwise returns standard Nagios exit codes to
signify WARNING, UNKNOWN or CRITICAL state.

=head1 SEE ALSO

See Nagios::Plugin(3)

The RabbitMQ management plugin is described at
http://www.rabbitmq.com/management.html

=head1 LICENSE

This file is part of nagios-plugins-rabbitmq.

Copyright 2010, Platform 14.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=head1 AUTHOR

James Casey <jamesc.000@gmail.com>
Andrew Wood <andrew.d.wood@gmail.com>

=cut

1;
